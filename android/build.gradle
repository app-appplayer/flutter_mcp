group = "com.example.flutter_mcp"
version = "1.0-SNAPSHOT"

buildscript {
    ext.kotlin_version = "1.8.22"
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.7.0")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

// Function to parse pubspec.yaml for flutter_mcp configuration
def getFlutterMcpConfig() {
    def config = [:]
    def pubspecFile = file("${project.rootDir}/../../pubspec.yaml")
    
    if (!pubspecFile.exists()) {
        // Try example app location
        pubspecFile = file("${project.rootDir}/../pubspec.yaml")
    }
    
    if (pubspecFile.exists()) {
        def lines = pubspecFile.readLines()
        def inFlutterMcp = false
        def inAndroid = false
        def inServiceTypes = false
        def serviceTypes = []
        
        lines.each { line ->
            if (line.trim() == 'flutter_mcp:') {
                inFlutterMcp = true
                inAndroid = false
                inServiceTypes = false
            } else if (inFlutterMcp && line.trim() == 'android:') {
                inAndroid = true
            } else if (inAndroid && line.trim() == 'foreground_service_types:') {
                inServiceTypes = true
            } else if (inServiceTypes) {
                if (line.trim().startsWith('-')) {
                    def type = line.trim().substring(1).trim()
                    if (type) serviceTypes.add(type)
                } else if (!line.startsWith(' ') && !line.startsWith('\t')) {
                    // End of service types section
                    inServiceTypes = false
                    inAndroid = false
                    inFlutterMcp = false
                }
            }
        }
        
        if (serviceTypes.size() > 0) {
            config['foregroundServiceType'] = serviceTypes.join('|')
        }
    }
    
    // Default to dataSync if no configuration found
    if (!config['foregroundServiceType']) {
        config['foregroundServiceType'] = 'dataSync'
    }
    
    return config
}

android {
    namespace = "com.example.flutter_mcp"

    compileSdk = 35

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = 21
        
        // Apply flutter_mcp configuration
        def mcpConfig = getFlutterMcpConfig()
        manifestPlaceholders = [
            foregroundServiceType: mcpConfig['foregroundServiceType']
        ]
    }

    dependencies {
        implementation "androidx.security:security-crypto:1.1.0-alpha06"
        implementation "androidx.work:work-runtime-ktx:2.9.0"
        implementation "androidx.core:core-ktx:1.12.0"
        implementation "androidx.appcompat:appcompat:1.6.1"
        
        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.mockito:mockito-core:5.0.0")
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}
