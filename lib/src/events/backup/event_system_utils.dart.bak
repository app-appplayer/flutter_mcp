import 'dart:async';
import 'dart:collection';
import 'package:synchronized/synchronized.dart';
import '../utils/logger.dart';
import '../utils/error_recovery.dart';
import '../utils/subscription_manager.dart';
import '../events/event_models.dart';

/// Type-safe event system for components to communicate across the application
class EventSystem {
  final Logger _logger = Logger('flutter_mcp.event_system');

  // Event streams by topic
  final Map<String, StreamController<dynamic>> _eventControllers = {};
  
  // Event subscriptions by token
  final Map<String, StreamSubscription<dynamic>> _subscriptions = {};
  
  // Subscription counter for generating unique tokens
  int _subscriptionCounter = 0;
  
  // Cached events by topic (for late subscribers)
  final Map<String, List<dynamic>> _cachedEvents = {};
  
  // Cache timestamps for expiration
  final Map<String, DateTime> _cacheTimestamps = {};
  
  // Maximum cache size per topic
  final int _maxCacheSize = 10;
  
  // Cache expiration duration (1 hour)
  final Duration _cacheExpiration = const Duration(hours: 1);

  // Whether event system is paused
  bool _isPaused = false;
  
  // Events queued while paused
  final List<_QueuedEvent> _queuedEvents = [];
  
  // Single lock for all operations to prevent deadlock
  final _systemLock = Lock();
  
  // Subscription manager for memory leak prevention
  final SubscriptionManager _subscriptionManager = SubscriptionManager.instance;
  
  // Typed event support
  final Map<Type, StreamController<McpEvent>> _typedControllers = {};
  final Map<Type, Queue<McpEvent>> _typedCachedEvents = {};
  final Map<String, _TypedSubscription> _typedSubscriptions = {};
  int _typedSubscriptionCounter = 0;
  
  // Event statistics
  int _totalEventsPublished = 0;
  int _totalEventsDelivered = 0;
  final Map<Type, int> _eventCounts = {};
  
  // Event recording and replay
  bool _isRecording = false;
  final List<RecordedEvent> _recordedEvents = [];
  final int _maxRecordedEvents = 1000;
  
  // Middleware support
  final List<EventMiddleware> _middleware = [];

  // Singleton instance
  static final EventSystem _instance = EventSystem._internal();

  /// Get singleton instance
  static EventSystem get instance => _instance;

  /// Internal constructor
  EventSystem._internal();

  /// Publish a typed MCP event
  Future<void> publishTyped<T extends McpEvent>(T event) async {
    // Process through middleware
    final processedEvent = await _processMiddleware(event, eventType: T);
    if (processedEvent == null) {
      return; // Event was blocked by middleware
    }
    
    // Record event if recording is enabled
    if (_isRecording) {
      await _systemLock.synchronized(() async {
        _recordedEvents.add(RecordedEvent(
          timestamp: DateTime.now(),
          eventType: T,
          event: processedEvent,
        ));
        
        // Limit recorded events
        while (_recordedEvents.length > _maxRecordedEvents) {
          _recordedEvents.removeAt(0);
        }
      });
    }
    
    bool isPaused = await _systemLock.synchronized(() => _isPaused);
    if (isPaused) {
      await _systemLock.synchronized(() async {
        _queuedEvents.add(_QueuedEvent<T>('typed:${T.toString()}', processedEvent as T));
      });
      _logger.fine('Typed event queued: ${(processedEvent as McpEvent).eventType} (system paused)');
      return;
    }
    
    final eventType = event.runtimeType;
    
    // Create controller if needed
    await _systemLock.synchronized(() async {
      if (!_typedControllers.containsKey(eventType)) {
        _typedControllers[eventType] = StreamController<McpEvent>.broadcast();
      }
    });
    
    // Add to typed cache
    await _cacheTypedEvent(eventType, processedEvent as McpEvent);
    
    // Publish event
    await _systemLock.synchronized(() async {
      _typedControllers[eventType]?.add(processedEvent as McpEvent);
      _totalEventsPublished++;
      _eventCounts[eventType] = (_eventCounts[eventType] ?? 0) + 1;
    });
    
    // Also publish to topic-based system for backward compatibility
    await publish((processedEvent as McpEvent).eventType, (processedEvent as McpEvent).toMap());
    
    _logger.fine('Published typed event: ${event.eventType}');
  }

  /// Subscribe to typed MCP events
  Future<String> subscribeTyped<T extends McpEvent>(void Function(T) handler) async {
    final eventType = T;
    _logger.fine('Subscribing to typed event: $eventType');
    
    // Create controller if needed
    await _systemLock.synchronized(() async {
      if (!_typedControllers.containsKey(eventType)) {
        _typedControllers[eventType] = StreamController<McpEvent>.broadcast();
      }
    });
    
    // Generate unique token
    final token = await _systemLock.synchronized(() async {
      _typedSubscriptionCounter++;
      return 'typed_${eventType}_$_typedSubscriptionCounter';
    });
    
    // Create subscription
    final controller = await _systemLock.synchronized(() => _typedControllers[eventType]);
    final subscription = controller!.stream
        .where((event) => event is T)
        .cast<T>()
        .listen((event) {
      try {
        handler(event);
        _totalEventsDelivered++;
      } catch (e, stackTrace) {
        _logger.severe('Error in typed event handler for $eventType', e, stackTrace);
      }
    });
    
    // Store subscription
    await _systemLock.synchronized(() async {
      _typedSubscriptions[token] = _TypedSubscription(
        subscription: subscription,
        eventType: eventType,
        handler: handler,
      );
    });
    
    // Register with subscription manager
    await _subscriptionManager.register(
      subscription: subscription,
      source: 'EventSystem',
      description: 'Typed: $eventType',
      autoCleanup: true,
    );
    
    // Deliver cached events
    await _deliverTypedCachedEvents<T>(handler);
    
    return token;
  }

  /// Subscribe with advanced filtering and transformation
  Future<String> subscribeAdvanced<T extends McpEvent, R>({
    required void Function(R) handler,
    bool Function(T)? filter,
    R Function(T)? transform,
    int priority = 0,
    Duration? timeout,
    int? maxInvocations,
    String? description,
    Map<String, dynamic> metadata = const {},
  }) async {
    final eventType = T;
    _logger.fine('Creating advanced subscription for: $eventType');
    
    // Create controller if needed
    await _systemLock.synchronized(() async {
      if (!_typedControllers.containsKey(eventType)) {
        _typedControllers[eventType] = StreamController<McpEvent>.broadcast();
      }
    });
    
    // Generate unique token
    final token = await _systemLock.synchronized(() async {
      _typedSubscriptionCounter++;
      return 'advanced_${eventType}_$_typedSubscriptionCounter';
    });
    
    // Track invocations and timing
    int invocations = 0;
    DateTime? lastInvocation;
    
    // Create subscription
    final controller = await _systemLock.synchronized(() => _typedControllers[eventType]);
    final subscription = controller!.stream
        .where((event) => event is T)
        .cast<T>()
        .where((event) {
          // Check max invocations
          if (maxInvocations != null && invocations >= maxInvocations) {
            return false;
          }
          
          // Check timeout
          if (timeout != null && lastInvocation != null) {
            final timeSinceLastInvocation = DateTime.now().difference(lastInvocation!);
            if (timeSinceLastInvocation < timeout) {
              return false;
            }
          }
          
          // Apply filter
          if (filter != null && !filter(event)) {
            return false;
          }
          
          return true;
        })
        .listen((event) {
      try {
        invocations++;
        lastInvocation = DateTime.now();
        
        if (transform != null) {
          final transformed = transform(event);
          handler(transformed);
        } else {
          handler(event as R);
        }
        
        _totalEventsDelivered++;
      } catch (e, stackTrace) {
        _logger.severe('Error in advanced event handler for $eventType', e, stackTrace);
      }
    });
    
    // Store subscription with metadata
    await _systemLock.synchronized(() async {
      _typedSubscriptions[token] = _TypedSubscription(
        subscription: subscription,
        eventType: eventType,
        handler: handler,
        metadata: {
          ...metadata,
          'priority': priority,
          'description': description,
          'hasFilter': filter != null,
          'hasTransform': transform != null,
          'maxInvocations': maxInvocations,
          'timeout': timeout?.inMilliseconds,
        },
      );
    });
    
    // Register with subscription manager
    await _subscriptionManager.register(
      subscription: subscription,
      source: 'EventSystem',
      description: description ?? 'Advanced: $eventType',
      autoCleanup: true,
    );
    
    return token;
  }

  /// Unsubscribe typed subscription
  Future<void> unsubscribeTyped(String token) async {
    final subscription = await _systemLock.synchronized(() => _typedSubscriptions[token]);
    
    if (subscription == null) {
      _logger.warning('Typed subscription not found: $token');
      return;
    }
    
    _logger.fine('Unsubscribing typed: $token');
    
    // Cancel subscription
    await subscription.subscription.cancel();
    await _systemLock.synchronized(() async {
      _typedSubscriptions.remove(token);
    });
    
    // Unregister from subscription manager
    await _subscriptionManager.unregister(token);
  }

  /// Publish an event to a topic
  Future<void> publish<T>(String topic, T event) async {
    // Process through middleware
    final processedEvent = await _processMiddleware(event, topic: topic);
    if (processedEvent == null) {
      return; // Event was blocked by middleware
    }
    
    // Record event if recording is enabled
    if (_isRecording) {
      await _systemLock.synchronized(() async {
        _recordedEvents.add(RecordedEvent(
          timestamp: DateTime.now(),
          topic: topic,
          event: processedEvent,
        ));
        
        // Limit recorded events
        while (_recordedEvents.length > _maxRecordedEvents) {
          _recordedEvents.removeAt(0);
        }
      });
    }
    
    bool isPaused = await _systemLock.synchronized(() => _isPaused);
    if (isPaused) {
      await _systemLock.synchronized(() async {
        _queuedEvents.add(_QueuedEvent<T>(topic, processedEvent as T));
      });
      _logger.fine('Event queued for topic: $topic (system paused)');
      return;
    }

    final hasController = await _systemLock.synchronized(() => 
      _eventControllers.containsKey(topic)
    );
    
    if (!hasController) {
      // Create a controller if we need to cache but don't have subscribers yet
      if (await _shouldCacheTopic(topic)) {
        await _systemLock.synchronized(() async {
          _eventControllers[topic] = StreamController<dynamic>.broadcast();
        });
      } else {
        _logger.fine('No subscribers for topic: $topic');
        return;
      }
    }

    _logger.fine('Publishing event to topic: $topic');

    // Add to cache if this topic uses caching
    if (await _shouldCacheTopic(topic)) {
      await _cacheEvent(topic, event);
    }

    // Publish to subscribers
    await _systemLock.synchronized(() async {
      _eventControllers[topic]?.add(event);
    });
  }

  /// Subscribe to a topic
  Future<String> subscribe<T>(String topic, void Function(T) handler) async {
    _logger.fine('Subscribing to topic: $topic');

    // Create stream controller if it doesn't exist
    await _systemLock.synchronized(() async {
      if (!_eventControllers.containsKey(topic)) {
        _eventControllers[topic] = StreamController<dynamic>.broadcast();
      }
    });

    // Generate unique token
    final token = await _systemLock.synchronized(() async {
      _subscriptionCounter++;
      return '${topic}_$_subscriptionCounter';
    });

    // Create subscription with type checking
    final controller = await _systemLock.synchronized(() => 
      _eventControllers[topic]
    );
    
    final subscription = controller!.stream
        .where((event) => event is T)
        .cast<T>()
        .listen((event) {
      try {
        handler(event);
      } catch (e, stackTrace) {
        _logger.severe('Error in event handler for topic $topic', e, stackTrace);
      }
    });

    // Store subscription with token
    await _systemLock.synchronized(() async {
      _subscriptions[token] = subscription;
    });
    
    // Register with subscription manager for leak prevention
    await _subscriptionManager.register(
      subscription: subscription,
      source: 'EventSystem',
      description: 'Topic: $topic',
      autoCleanup: true,
    );

    // Deliver cached events if available
    await _deliverCachedEvents<T>(topic, handler);

    return token;
  }

  /// Unsubscribe using token
  Future<void> unsubscribe(String token) async {
    final subscription = await _systemLock.synchronized(() => 
      _subscriptions[token]
    );
    
    if (subscription == null) {
      _logger.warning('Subscription not found: $token');
      return;
    }

    _logger.fine('Unsubscribing: $token');

    // Cancel subscription
    await subscription.cancel();
    await _systemLock.synchronized(() async {
      _subscriptions.remove(token);
    });
    
    // Unregister from subscription manager
    await _subscriptionManager.unregister(token);

    // Extract topic from token
    final topic = token.split('_').first;

    // Check if this was the last subscription for the topic
    final hasMoreSubscribers = await _systemLock.synchronized(() => 
      _subscriptions.keys.any((k) => k.startsWith('${topic}_'))
    );
    
    if (!hasMoreSubscribers) {
      _logger.fine('No more subscribers for topic: $topic, cleaning up');
      await _systemLock.synchronized(() async {
        await _eventControllers[topic]?.close();
        _eventControllers.remove(topic);
      });

      // Don't remove cached events - they may be needed for future subscribers
    }
  }

  /// Unsubscribe all handlers from a topic
  Future<void> unsubscribeFromTopic(String topic) async {
    _logger.fine('Unsubscribing all from topic: $topic');

    // Find all tokens for this topic
    final tokensToRemove = await _systemLock.synchronized(() => 
      _subscriptions.keys
        .where((token) => token.startsWith('${topic}_'))
        .toList()
    );

    // Cancel each subscription
    for (final token in tokensToRemove) {
      await _systemLock.synchronized(() async {
        await _subscriptions[token]?.cancel();
        _subscriptions.remove(token);
      });
    }

    // Clean up controller
    await _systemLock.synchronized(() async {
      await _eventControllers[topic]?.close();
      _eventControllers.remove(topic);
    });

    // Don't remove cached events
  }

  /// Check if a topic has subscribers
  Future<bool> hasSubscribers(String topic) async {
    return await _systemLock.synchronized(() {
      final controller = _eventControllers[topic];
      if (controller == null || controller.isClosed) {
        return false;
      }
      return _subscriptions.keys.any((token) => token.startsWith('${topic}_'));
    });
  }

  /// Get number of subscribers for a topic
  Future<int> subscriberCount(String topic) async {
    return await _systemLock.synchronized(() {
      if (!_eventControllers.containsKey(topic)) {
        return 0;
      }
      return _subscriptions.keys.where((token) => token.startsWith('${topic}_')).length;
    });
  }

  /// Create a filterable subscription
  Future<String> subscribeWithFilter<T>(
      String topic,
      void Function(T) handler,
      bool Function(T) filter,
      ) async {
    _logger.fine('Subscribing to topic with filter: $topic');

    // Create stream controller if it doesn't exist
    await _systemLock.synchronized(() async {
      if (!_eventControllers.containsKey(topic)) {
        _eventControllers[topic] = StreamController<dynamic>.broadcast();
      }
    });

    // Generate unique token
    final token = await _systemLock.synchronized(() async {
      _subscriptionCounter++;
      return '${topic}_$_subscriptionCounter';
    });

    // Get controller
    final controller = await _systemLock.synchronized(() => 
      _eventControllers[topic]
    );

    // Create subscription with filter
    final subscription = controller!.stream
        .where((event) => event is T && filter(event))
        .cast<T>()
        .listen((event) {
      try {
        handler(event);
      } catch (e, stackTrace) {
        _logger.severe('Error in filtered event handler for topic $topic', e, stackTrace);
      }
    });

    // Store subscription with token
    await _systemLock.synchronized(() async {
      _subscriptions[token] = subscription;
    });

    // Deliver cached events that match the filter
    final cachedEvents = await _systemLock.synchronized(() => 
      _cachedEvents[topic]?.toList()
    );
    
    if (cachedEvents != null) {
      for (final event in cachedEvents) {
        if (event is T && filter(event)) {
          ErrorRecovery.tryCatch(
                () => handler(event),
            operationName: 'cached event delivery with filter for $topic',
          );
        }
      }
    }

    return token;
  }

  /// Create a subscription that automatically expires after maxEvents or timeout
  Future<String> subscribeTemporary<T>(
      String topic,
      void Function(T) handler, {
        int? maxEvents,
        Duration? timeout,
      }) async {
    _logger.fine('Creating temporary subscription to topic: $topic');

    // Create stream controller if it doesn't exist
    await _systemLock.synchronized(() async {
      if (!_eventControllers.containsKey(topic)) {
        _eventControllers[topic] = StreamController<dynamic>.broadcast();
      }
    });

    // Generate unique token
    final token = await _systemLock.synchronized(() async {
      _subscriptionCounter++;
      return '${topic}_$_subscriptionCounter';
    });

    // Track received events
    int receivedEvents = 0;

    // Get controller
    final controller = await _systemLock.synchronized(() => 
      _eventControllers[topic]
    );

    // Create subscription
    final subscription = controller!.stream
        .where((event) => event is T)
        .cast<T>()
        .listen((event) {
      try {
        handler(event);

        // Check if max events reached
        if (maxEvents != null) {
          receivedEvents++;
          if (receivedEvents >= maxEvents) {
            unsubscribe(token);
          }
        }
      } catch (e, stackTrace) {
        _logger.severe('Error in temporary event handler for topic $topic', e, stackTrace);
      }
    });

    // Store subscription with token
    await _systemLock.synchronized(() async {
      _subscriptions[token] = subscription;
    });

    // Set up timeout if needed
    if (timeout != null) {
      Timer(timeout, () async {
        final hasSubscription = await _systemLock.synchronized(() => 
          _subscriptions.containsKey(token)
        );
        if (hasSubscription) {
          _logger.fine('Subscription timeout reached: $token');
          await unsubscribe(token);
        }
      });
    }

    // Deliver cached events (count towards maxEvents)
    final cachedEvents = await _systemLock.synchronized(() => 
      _cachedEvents[topic]?.toList()
    );
    
    if (cachedEvents != null && maxEvents != null) {
      for (final event in cachedEvents) {
        if (event is T) {
          ErrorRecovery.tryCatch(
                () => handler(event),
            operationName: 'cached event delivery for temporary subscription to $topic',
          );

          receivedEvents++;
          if (receivedEvents >= maxEvents) {
            await unsubscribe(token);
            break;
          }
        }
      }
    }

    return token;
  }

  /// Create a one-time subscription that automatically unsubscribes after first event
  Future<String> subscribeOnce<T>(String topic, void Function(T) handler) async {
    return await subscribeTemporary<T>(topic, handler, maxEvents: 1);
  }

  /// Create a subscription with debounce
  Future<String> subscribeWithDebounce<T>(
      String topic,
      void Function(T) handler,
      Duration duration,
      ) async {
    _logger.fine('Creating debounced subscription to topic: $topic');

    // Create stream controller if it doesn't exist
    await _systemLock.synchronized(() async {
      if (!_eventControllers.containsKey(topic)) {
        _eventControllers[topic] = StreamController<dynamic>.broadcast();
      }
    });

    // Generate unique token
    final token = await _systemLock.synchronized(() async {
      _subscriptionCounter++;
      return '${topic}_$_subscriptionCounter';
    });

    // Get controller
    final controller = await _systemLock.synchronized(() => 
      _eventControllers[topic]
    );

    // Create subscription with debounce
    final subscription = controller!.stream
        .where((event) => event is T)
        .cast<T>()
        .debounceTime(duration)
        .listen((event) {
      try {
        handler(event);
      } catch (e, stackTrace) {
        _logger.severe('Error in debounced event handler for topic $topic', e, stackTrace);
      }
    });

    // Store subscription with token
    await _systemLock.synchronized(() async {
      _subscriptions[token] = subscription;
    });

    return token;
  }

  /// Create a subscription with throttle
  Future<String> subscribeWithThrottle<T>(
      String topic,
      void Function(T) handler,
      Duration duration,
      ) async {
    _logger.fine('Creating throttled subscription to topic: $topic');

    // Create stream controller if it doesn't exist
    await _systemLock.synchronized(() async {
      if (!_eventControllers.containsKey(topic)) {
        _eventControllers[topic] = StreamController<dynamic>.broadcast();
      }
    });

    // Generate unique token
    final token = await _systemLock.synchronized(() async {
      _subscriptionCounter++;
      return '${topic}_$_subscriptionCounter';
    });

    // Get controller
    final controller = await _systemLock.synchronized(() => 
      _eventControllers[topic]
    );

    // Timer for throttling
    Timer? throttleTimer;
    bool canEmit = true;
    final throttleLock = Lock();

    // Create subscription with manual throttle
    final subscription = controller!.stream
        .where((event) => event is T)
        .cast<T>()
        .listen((event) async {
      final shouldEmit = await throttleLock.synchronized(() => canEmit);
      if (shouldEmit) {
        try {
          handler(event);
          await throttleLock.synchronized(() async {
            canEmit = false;
          });

          throttleTimer?.cancel();
          throttleTimer = Timer(duration, () async {
            await throttleLock.synchronized(() async {
              canEmit = true;
            });
          });
        } catch (e, stackTrace) {
          _logger.severe('Error in throttled event handler for topic $topic', e, stackTrace);
        }
      }
    });

    // Store subscription with token
    await _systemLock.synchronized(() async {
      _subscriptions[token] = subscription;
    });

    return token;
  }

  /// Enable event caching for a topic
  Future<void> enableCaching(String topic) async {
    await _systemLock.synchronized(() async {
      if (!_cachedEvents.containsKey(topic)) {
        _cachedEvents[topic] = [];
      }
    });
  }

  /// Disable event caching for a topic
  Future<void> disableCaching(String topic) async {
    await _systemLock.synchronized(() async {
      _cachedEvents.remove(topic);
    });
  }

  /// Clear cached events for a topic
  Future<void> clearCache(String topic) async {
    await _systemLock.synchronized(() async {
      if (_cachedEvents.containsKey(topic)) {
        _cachedEvents[topic]!.clear();
      }
    });
  }

  /// Cache an event
  Future<void> _cacheEvent<T>(String topic, T event) async {
    if (!await _shouldCacheTopic(topic)) {
      return;
    }

    await _systemLock.synchronized(() async {
      // Ensure cache exists
      _cachedEvents.putIfAbsent(topic, () => []);

      // Add to cache
      _cachedEvents[topic]!.add(event);
      
      // Update timestamp
      _cacheTimestamps[topic] = DateTime.now();

      // Trim cache if needed
      if (_cachedEvents[topic]!.length > _maxCacheSize) {
        _cachedEvents[topic]!.removeAt(0);
      }
      
      // Clean expired caches
      _cleanExpiredCaches();
    });
  }

  /// Deliver cached events to a new subscriber
  Future<void> _deliverCachedEvents<T>(String topic, void Function(T) handler) async {
    final events = await _systemLock.synchronized(() => 
      _cachedEvents[topic]?.toList()
    );
    
    if (events == null) {
      return;
    }

    for (final event in events) {
      if (event is T) {
        ErrorRecovery.tryCatch(
              () => handler(event),
          operationName: 'cached event delivery for $topic',
        );
      }
    }
  }

  /// Check if a topic should cache events
  Future<bool> _shouldCacheTopic(String topic) async {
    return await _systemLock.synchronized(() => 
      _cachedEvents.containsKey(topic)
    );
  }
  
  /// Clean expired caches
  void _cleanExpiredCaches() {
    final now = DateTime.now();
    final expiredTopics = <String>[];
    
    _cacheTimestamps.forEach((topic, timestamp) {
      if (now.difference(timestamp) > _cacheExpiration) {
        expiredTopics.add(topic);
      }
    });
    
    for (final topic in expiredTopics) {
      _cachedEvents.remove(topic);
      _cacheTimestamps.remove(topic);
      _logger.fine('Expired cache for topic: $topic');
    }
  }

  /// Pause event delivery
  Future<void> pause() async {
    await _systemLock.synchronized(() async {
      _isPaused = true;
    });
    _logger.fine('Event system paused');
  }

  /// Resume event delivery, optionally processing queued events
  Future<void> resume({bool processQueued = true}) async {
    await _systemLock.synchronized(() async {
      _isPaused = false;
    });
    _logger.fine('Event system resumed');

    final queuedEvents = await _systemLock.synchronized(() async {
      if (processQueued && _queuedEvents.isNotEmpty) {
        // Take a copy to avoid concurrent modification issues
        final events = List<_QueuedEvent>.from(_queuedEvents);
        _queuedEvents.clear();
        return events;
      } else if (!processQueued) {
        // Clear queued events without processing
        _queuedEvents.clear();
        return <_QueuedEvent>[];
      }
      return <_QueuedEvent>[];
    });

    if (queuedEvents.isNotEmpty) {
      _logger.fine('Processing ${queuedEvents.length} queued events');
      // Process queued events
      for (final queuedEvent in queuedEvents) {
        await queuedEvent.publish(this);
      }
    }
  }

  /// Get a list of active topics
  Future<List<String>> getActiveTopics() async {
    final Set<String> topics = {};

    // Add topics with controllers
    await _systemLock.synchronized(() async {
      topics.addAll(_eventControllers.keys);
    });

    // Add topics with cached events
    await _systemLock.synchronized(() async {
      topics.addAll(_cachedEvents.keys);
    });

    return topics.toList();
  }

  // Event recording methods
  /// Start recording events
  Future<void> startRecording() async {
    await _systemLock.synchronized(() async {
      _isRecording = true;
      _recordedEvents.clear();
    });
    _logger.fine('Event recording started');
  }
  
  /// Stop recording events
  Future<void> stopRecording() async {
    await _systemLock.synchronized(() async {
      _isRecording = false;
    });
    _logger.fine('Event recording stopped');
  }
  
  /// Get recorded events
  Future<List<RecordedEvent>> getRecordedEvents() async {
    return await _systemLock.synchronized(() async {
      return List<RecordedEvent>.from(_recordedEvents);
    });
  }
  
  /// Replay recorded events
  Future<void> replayRecordedEvents({Duration? delay}) async {
    final events = await getRecordedEvents();
    _logger.fine('Replaying ${events.length} recorded events');
    
    for (final recordedEvent in events) {
      if (delay != null) {
        await Future.delayed(delay);
      }
      
      if (recordedEvent.topic != null) {
        await publish(recordedEvent.topic!, recordedEvent.event);
      } else if (recordedEvent.eventType != null && recordedEvent.event is McpEvent) {
        await publishTyped(recordedEvent.event as McpEvent);
      }
    }
  }
  
  // Middleware methods
  /// Add middleware
  Future<void> addMiddleware(EventMiddleware middleware) async {
    await _systemLock.synchronized(() async {
      _middleware.add(middleware);
    });
    _logger.fine('Added event middleware');
  }
  
  /// Remove middleware
  Future<void> removeMiddleware(EventMiddleware middleware) async {
    await _systemLock.synchronized(() async {
      _middleware.remove(middleware);
    });
    _logger.fine('Removed event middleware');
  }
  
  /// Process event through middleware
  Future<dynamic> _processMiddleware(dynamic event, {String? topic, Type? eventType}) async {
    var processedEvent = event;
    
    for (final middleware in List<EventMiddleware>.from(_middleware)) {
      processedEvent = await middleware.process(processedEvent, topic: topic, eventType: eventType);
      if (processedEvent == null) {
        _logger.fine('Event blocked by middleware');
        return null;
      }
    }
    
    return processedEvent;
  }

  /// Get event system statistics
  Future<Map<String, dynamic>> getStatistics() async {
    return await _systemLock.synchronized(() {
      final typedSubscriptionCounts = <String, int>{};
      for (final sub in _typedSubscriptions.values) {
        final typeName = sub.eventType.toString();
        typedSubscriptionCounts[typeName] = (typedSubscriptionCounts[typeName] ?? 0) + 1;
      }
      
      return {
        'totalEventsPublished': _totalEventsPublished,
        'totalEventsDelivered': _totalEventsDelivered,
        'activeSubscriptions': _subscriptions.length,
        'activeTypedSubscriptions': _typedSubscriptions.length,
        'activeControllers': _eventControllers.length,
        'activeTypedControllers': _typedControllers.length,
        'queuedEvents': _queuedEvents.length,
        'isPaused': _isPaused,
        'eventCounts': _eventCounts,
        'typedSubscriptionCounts': typedSubscriptionCounts,
      };
    });
  }

  /// Cache a typed event
  Future<void> _cacheTypedEvent(Type eventType, McpEvent event) async {
    await _systemLock.synchronized(() async {
      _typedCachedEvents.putIfAbsent(eventType, () => Queue<McpEvent>());
      
      final cache = _typedCachedEvents[eventType]!;
      cache.add(event);
      
      // Keep only the most recent events
      while (cache.length > _maxCacheSize) {
        cache.removeFirst();
      }
    });
  }
  
  /// Deliver cached typed events to a new subscriber
  Future<void> _deliverTypedCachedEvents<T extends McpEvent>(void Function(T) handler) async {
    final eventType = T;
    final cached = await _systemLock.synchronized(() => 
      _typedCachedEvents[eventType]?.toList()
    );
    
    if (cached != null) {
      for (final event in cached) {
        if (event is T) {
          ErrorRecovery.tryCatch(
            () => handler(event),
            operationName: 'typed cached event delivery for $eventType',
          );
        }
      }
    }
  }

  /// Reset the event system for testing purposes
  Future<void> reset() async {
    _logger.fine('Resetting event system');

    // Cancel all subscriptions
    await _systemLock.synchronized(() async {
      for (final subscription in _subscriptions.values) {
        await subscription.cancel();
      }
      _subscriptions.clear();
      
      // Cancel typed subscriptions
      for (final typedSub in _typedSubscriptions.values) {
        await typedSub.subscription.cancel();
      }
      _typedSubscriptions.clear();
    });

    // Close all controllers
    await _systemLock.synchronized(() async {
      for (final controller in _eventControllers.values) {
        await controller.close();
      }
      _eventControllers.clear();
      
      // Close typed controllers
      for (final controller in _typedControllers.values) {
        await controller.close();
      }
      _typedControllers.clear();
    });

    // Clear collections
    await _systemLock.synchronized(() async {
      _cachedEvents.clear();
      _typedCachedEvents.clear();
      _queuedEvents.clear();
      _subscriptionCounter = 0;
      _typedSubscriptionCounter = 0;
      _isPaused = false;
      _totalEventsPublished = 0;
      _totalEventsDelivered = 0;
      _eventCounts.clear();
    });
  }

  /// Clean up resources
  Future<void> dispose() async {
    await reset();
    
    // Clean up subscription manager
    await _subscriptionManager.unregisterBySource('EventSystem');
    
    _logger.fine('Event system disposed');
  }
}

/// Extension method for Stream debounce with proper cleanup
extension DebounceExtension<T> on Stream<T> {
  Stream<T> debounceTime(Duration duration) {
    StreamController<T>? controller;
    Timer? timer;
    StreamSubscription<T>? subscription;
    T? lastValue;
    var hasValue = false;

    controller = StreamController<T>(
      sync: true,
      onListen: () {
        subscription = listen(
          (data) {
            lastValue = data;
            hasValue = true;
            timer?.cancel();
            timer = Timer(duration, () {
              if (hasValue && controller != null && !controller.isClosed) {
                controller.add(lastValue as T);
                hasValue = false;
              }
            });
          },
          onError: (error) {
            timer?.cancel();
            controller?.addError(error);
          },
          onDone: () {
            timer?.cancel();
            controller?.close();
          },
          cancelOnError: false,
        );
      },
      onCancel: () {
        timer?.cancel();
        subscription?.cancel();
        timer = null;
        subscription = null;
        lastValue = null;
        hasValue = false;
      },
    );

    return controller.stream;
  }
}

/// Queued event for when system is paused
class _QueuedEvent<T> {
  final String topic;
  final T event;

  _QueuedEvent(this.topic, this.event);

  /// Publish the event to the event system
  Future<void> publish(EventSystem eventSystem) async {
    if (topic.startsWith('typed:')) {
      // Handle typed events
      if (event is McpEvent) {
        await eventSystem.publishTyped(event as McpEvent);
      }
    } else {
      // Handle regular events
      await eventSystem.publish<T>(topic, event);
    }
  }
}

/// Internal class for typed subscriptions
class _TypedSubscription {
  final StreamSubscription<McpEvent> subscription;
  final Type eventType;
  final dynamic handler;
  final Map<String, dynamic> metadata;
  
  _TypedSubscription({
    required this.subscription,
    required this.eventType,
    required this.handler,
    this.metadata = const {},
  });
}

/// Recorded event for replay functionality
class RecordedEvent {
  final DateTime timestamp;
  final String? topic;
  final Type? eventType;
  final dynamic event;
  
  RecordedEvent({
    required this.timestamp,
    this.topic,
    this.eventType,
    required this.event,
  });
}

/// Event middleware interface
abstract class EventMiddleware {
  /// Process an event before it's delivered
  /// Return null to block the event
  Future<dynamic> process(dynamic event, {String? topic, Type? eventType});
}