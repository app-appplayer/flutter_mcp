// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_mcp/test/mcp_mock_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_mcp/src/config/background_config.dart' as _i4;
import 'package:flutter_mcp/src/config/notification_config.dart' as _i6;
import 'package:flutter_mcp/src/config/tray_config.dart' as _i8;
import 'package:flutter_mcp/src/platform/background/background_service.dart'
    as _i2;
import 'package:flutter_mcp/src/platform/notification/notification_manager.dart'
    as _i5;
import 'package:flutter_mcp/src/platform/storage/secure_storage.dart' as _i9;
import 'package:flutter_mcp/src/platform/tray/tray_manager.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [BackgroundService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackgroundService extends _i1.Mock implements _i2.BackgroundService {
  MockBackgroundService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isRunning =>
      (super.noSuchMethod(Invocation.getter(#isRunning), returnValue: false)
          as bool);

  @override
  _i3.Future<void> initialize(_i4.BackgroundConfig? config) =>
      (super.noSuchMethod(
            Invocation.method(#initialize, [config]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> start() =>
      (super.noSuchMethod(
            Invocation.method(#start, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> stop() =>
      (super.noSuchMethod(
            Invocation.method(#stop, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);
}

/// A class which mocks [NotificationManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationManager extends _i1.Mock
    implements _i5.NotificationManager {
  MockNotificationManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize(_i6.NotificationConfig? config) =>
      (super.noSuchMethod(
            Invocation.method(#initialize, [config]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> showNotification({
    required String? title,
    required String? body,
    String? icon,
    String? id = 'mcp_notification',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#showNotification, [], {
              #title: title,
              #body: body,
              #icon: icon,
              #id: id,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> hideNotification(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#hideNotification, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [TrayManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrayManager extends _i1.Mock implements _i7.TrayManager {
  MockTrayManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize(_i8.TrayConfig? config) =>
      (super.noSuchMethod(
            Invocation.method(#initialize, [config]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> setIcon(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#setIcon, [path]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> setTooltip(String? tooltip) =>
      (super.noSuchMethod(
            Invocation.method(#setTooltip, [tooltip]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> setContextMenu(List<_i7.TrayMenuItem>? items) =>
      (super.noSuchMethod(
            Invocation.method(#setContextMenu, [items]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [SecureStorageManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorageManager extends _i1.Mock
    implements _i9.SecureStorageManager {
  MockSecureStorageManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> saveString(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#saveString, [key, value]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<String?> readString(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#readString, [key]),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<bool> delete(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [key]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> containsKey(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [key]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> saveMap(String? key, Map<String, dynamic>? value) =>
      (super.noSuchMethod(
            Invocation.method(#saveMap, [key, value]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>?> readMap(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#readMap, [key]),
            returnValue: _i3.Future<Map<String, dynamic>?>.value(),
          )
          as _i3.Future<Map<String, dynamic>?>);

  @override
  _i3.Future<void> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
