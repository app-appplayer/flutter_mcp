// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_mcp/test/mcp_plugin_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:mcp_client/src/client/client.dart' as _i2;
import 'package:mcp_client/src/models/models.dart' as _i3;
import 'package:mcp_client/src/transport/transport.dart' as _i9;
import 'package:mcp_llm/mcp_llm.dart' as _i6;
import 'package:mcp_llm/src/adapter/llm_server_adapter.dart' as _i11;
import 'package:mcp_server/src/models/models.dart' as _i5;
import 'package:mcp_server/src/server/server.dart' as _i4;
import 'package:mcp_server/src/transport/transport.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClientCapabilities_0 extends _i1.SmartFake
    implements _i2.ClientCapabilities {
  _FakeClientCapabilities_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCallToolResult_1 extends _i1.SmartFake
    implements _i3.CallToolResult {
  _FakeCallToolResult_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeToolCallTracking_2 extends _i1.SmartFake
    implements _i2.ToolCallTracking {
  _FakeToolCallTracking_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeReadResourceResult_3 extends _i1.SmartFake
    implements _i3.ReadResourceResult {
  _FakeReadResourceResult_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetPromptResult_4 extends _i1.SmartFake
    implements _i3.GetPromptResult {
  _FakeGetPromptResult_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCreateMessageResult_5 extends _i1.SmartFake
    implements _i3.CreateMessageResult {
  _FakeCreateMessageResult_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeServerHealth_6 extends _i1.SmartFake implements _i3.ServerHealth {
  _FakeServerHealth_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeServerCapabilities_7 extends _i1.SmartFake
    implements _i4.ServerCapabilities {
  _FakeServerCapabilities_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDuration_8 extends _i1.SmartFake implements Duration {
  _FakeDuration_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePendingOperation_9 extends _i1.SmartFake
    implements _i5.PendingOperation {
  _FakePendingOperation_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeServerHealth_10 extends _i1.SmartFake implements _i5.ServerHealth {
  _FakeServerHealth_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStopwatch_11 extends _i1.SmartFake implements Stopwatch {
  _FakeStopwatch_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLlmInterface_12 extends _i1.SmartFake implements _i6.LlmInterface {
  _FakeLlmInterface_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePluginManager_13 extends _i1.SmartFake implements _i6.PluginManager {
  _FakePluginManager_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeChatSession_14 extends _i1.SmartFake implements _i6.ChatSession {
  _FakeChatSession_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLlmResponse_15 extends _i1.SmartFake implements _i6.LlmResponse {
  _FakeLlmResponse_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i2.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i7.dummyValue<String>(this, Invocation.getter(#name)),
          )
          as String);

  @override
  String get version =>
      (super.noSuchMethod(
            Invocation.getter(#version),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#version),
            ),
          )
          as String);

  @override
  _i2.ClientCapabilities get capabilities =>
      (super.noSuchMethod(
            Invocation.getter(#capabilities),
            returnValue: _FakeClientCapabilities_0(
              this,
              Invocation.getter(#capabilities),
            ),
          )
          as _i2.ClientCapabilities);

  @override
  String get protocolVersion =>
      (super.noSuchMethod(
            Invocation.getter(#protocolVersion),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#protocolVersion),
            ),
          )
          as String);

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  _i8.Future<void> connect(_i9.ClientTransport? transport) =>
      (super.noSuchMethod(
            Invocation.method(#connect, [transport]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> connectWithRetry(
    _i9.ClientTransport? transport, {
    int? maxRetries = 3,
    Duration? delay = const Duration(seconds: 2),
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #connectWithRetry,
              [transport],
              {#maxRetries: maxRetries, #delay: delay},
            ),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<List<_i3.Tool>> listTools() =>
      (super.noSuchMethod(
            Invocation.method(#listTools, []),
            returnValue: _i8.Future<List<_i3.Tool>>.value(<_i3.Tool>[]),
          )
          as _i8.Future<List<_i3.Tool>>);

  @override
  _i8.Future<_i3.CallToolResult> callTool(
    String? name,
    Map<String, dynamic>? toolArguments,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#callTool, [name, toolArguments]),
            returnValue: _i8.Future<_i3.CallToolResult>.value(
              _FakeCallToolResult_1(
                this,
                Invocation.method(#callTool, [name, toolArguments]),
              ),
            ),
          )
          as _i8.Future<_i3.CallToolResult>);

  @override
  _i8.Future<_i2.ToolCallTracking> callToolWithTracking(
    String? name,
    Map<String, dynamic>? arguments, {
    bool? trackProgress = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #callToolWithTracking,
              [name, arguments],
              {#trackProgress: trackProgress},
            ),
            returnValue: _i8.Future<_i2.ToolCallTracking>.value(
              _FakeToolCallTracking_2(
                this,
                Invocation.method(
                  #callToolWithTracking,
                  [name, arguments],
                  {#trackProgress: trackProgress},
                ),
              ),
            ),
          )
          as _i8.Future<_i2.ToolCallTracking>);

  @override
  _i8.Future<void> cancelOperation(String? operationId) =>
      (super.noSuchMethod(
            Invocation.method(#cancelOperation, [operationId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<List<_i3.Resource>> listResources() =>
      (super.noSuchMethod(
            Invocation.method(#listResources, []),
            returnValue: _i8.Future<List<_i3.Resource>>.value(<_i3.Resource>[]),
          )
          as _i8.Future<List<_i3.Resource>>);

  @override
  _i8.Future<_i3.ReadResourceResult> readResource(String? uri) =>
      (super.noSuchMethod(
            Invocation.method(#readResource, [uri]),
            returnValue: _i8.Future<_i3.ReadResourceResult>.value(
              _FakeReadResourceResult_3(
                this,
                Invocation.method(#readResource, [uri]),
              ),
            ),
          )
          as _i8.Future<_i3.ReadResourceResult>);

  @override
  _i8.Future<_i3.ReadResourceResult> getResourceWithTemplate(
    String? templateUri,
    Map<String, dynamic>? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getResourceWithTemplate, [templateUri, params]),
            returnValue: _i8.Future<_i3.ReadResourceResult>.value(
              _FakeReadResourceResult_3(
                this,
                Invocation.method(#getResourceWithTemplate, [
                  templateUri,
                  params,
                ]),
              ),
            ),
          )
          as _i8.Future<_i3.ReadResourceResult>);

  @override
  _i8.Future<void> subscribeResource(String? uri) =>
      (super.noSuchMethod(
            Invocation.method(#subscribeResource, [uri]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> unsubscribeResource(String? uri) =>
      (super.noSuchMethod(
            Invocation.method(#unsubscribeResource, [uri]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<List<_i3.ResourceTemplate>> listResourceTemplates() =>
      (super.noSuchMethod(
            Invocation.method(#listResourceTemplates, []),
            returnValue: _i8.Future<List<_i3.ResourceTemplate>>.value(
              <_i3.ResourceTemplate>[],
            ),
          )
          as _i8.Future<List<_i3.ResourceTemplate>>);

  @override
  _i8.Future<List<_i3.Prompt>> listPrompts() =>
      (super.noSuchMethod(
            Invocation.method(#listPrompts, []),
            returnValue: _i8.Future<List<_i3.Prompt>>.value(<_i3.Prompt>[]),
          )
          as _i8.Future<List<_i3.Prompt>>);

  @override
  _i8.Future<_i3.GetPromptResult> getPrompt(
    String? name, [
    Map<String, dynamic>? promptArguments,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#getPrompt, [name, promptArguments]),
            returnValue: _i8.Future<_i3.GetPromptResult>.value(
              _FakeGetPromptResult_4(
                this,
                Invocation.method(#getPrompt, [name, promptArguments]),
              ),
            ),
          )
          as _i8.Future<_i3.GetPromptResult>);

  @override
  _i8.Future<_i3.CreateMessageResult> createMessage(
    _i3.CreateMessageRequest? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createMessage, [request]),
            returnValue: _i8.Future<_i3.CreateMessageResult>.value(
              _FakeCreateMessageResult_5(
                this,
                Invocation.method(#createMessage, [request]),
              ),
            ),
          )
          as _i8.Future<_i3.CreateMessageResult>);

  @override
  _i8.Future<_i3.ServerHealth> healthCheck() =>
      (super.noSuchMethod(
            Invocation.method(#healthCheck, []),
            returnValue: _i8.Future<_i3.ServerHealth>.value(
              _FakeServerHealth_6(this, Invocation.method(#healthCheck, [])),
            ),
          )
          as _i8.Future<_i3.ServerHealth>);

  @override
  _i8.Future<void> addRoot(_i3.Root? root) =>
      (super.noSuchMethod(
            Invocation.method(#addRoot, [root]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> removeRoot(String? uri) =>
      (super.noSuchMethod(
            Invocation.method(#removeRoot, [uri]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<List<_i3.Root>> listRoots() =>
      (super.noSuchMethod(
            Invocation.method(#listRoots, []),
            returnValue: _i8.Future<List<_i3.Root>>.value(<_i3.Root>[]),
          )
          as _i8.Future<List<_i3.Root>>);

  @override
  _i8.Future<void> setLoggingLevel(_i3.McpLogLevel? level) =>
      (super.noSuchMethod(
            Invocation.method(#setLoggingLevel, [level]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void onNotification(
    String? method,
    dynamic Function(Map<String, dynamic>)? handler,
  ) => super.noSuchMethod(
    Invocation.method(#onNotification, [method, handler]),
    returnValueForMissingStub: null,
  );

  @override
  void onToolsListChanged(dynamic Function()? handler) => super.noSuchMethod(
    Invocation.method(#onToolsListChanged, [handler]),
    returnValueForMissingStub: null,
  );

  @override
  void onResourcesListChanged(dynamic Function()? handler) =>
      super.noSuchMethod(
        Invocation.method(#onResourcesListChanged, [handler]),
        returnValueForMissingStub: null,
      );

  @override
  void onPromptsListChanged(dynamic Function()? handler) => super.noSuchMethod(
    Invocation.method(#onPromptsListChanged, [handler]),
    returnValueForMissingStub: null,
  );

  @override
  void onRootsListChanged(dynamic Function()? handler) => super.noSuchMethod(
    Invocation.method(#onRootsListChanged, [handler]),
    returnValueForMissingStub: null,
  );

  @override
  void onResourceUpdated(dynamic Function(String)? handler) =>
      super.noSuchMethod(
        Invocation.method(#onResourceUpdated, [handler]),
        returnValueForMissingStub: null,
      );

  @override
  void onResourceContentUpdated(
    dynamic Function(String, _i3.ResourceContentInfo)? handler,
  ) => super.noSuchMethod(
    Invocation.method(#onResourceContentUpdated, [handler]),
    returnValueForMissingStub: null,
  );

  @override
  void onProgress(dynamic Function(String, double, String)? handler) =>
      super.noSuchMethod(
        Invocation.method(#onProgress, [handler]),
        returnValueForMissingStub: null,
      );

  @override
  void onSamplingResponse(
    dynamic Function(String, _i3.CreateMessageResult)? handler,
  ) => super.noSuchMethod(
    Invocation.method(#onSamplingResponse, [handler]),
    returnValueForMissingStub: null,
  );

  @override
  void onLogging(
    dynamic Function(_i3.McpLogLevel, String, String?, Map<String, dynamic>?)?
    handler,
  ) => super.noSuchMethod(
    Invocation.method(#onLogging, [handler]),
    returnValueForMissingStub: null,
  );

  @override
  void disconnect() => super.noSuchMethod(
    Invocation.method(#disconnect, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Server].
///
/// See the documentation for Mockito's code generation for more information.
class MockServer extends _i1.Mock implements _i4.Server {
  MockServer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i7.dummyValue<String>(this, Invocation.getter(#name)),
          )
          as String);

  @override
  String get version =>
      (super.noSuchMethod(
            Invocation.getter(#version),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#version),
            ),
          )
          as String);

  @override
  _i4.ServerCapabilities get capabilities =>
      (super.noSuchMethod(
            Invocation.getter(#capabilities),
            returnValue: _FakeServerCapabilities_7(
              this,
              Invocation.getter(#capabilities),
            ),
          )
          as _i4.ServerCapabilities);

  @override
  List<String> get supportedProtocolVersions =>
      (super.noSuchMethod(
            Invocation.getter(#supportedProtocolVersions),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  Duration get defaultCacheMaxAge =>
      (super.noSuchMethod(
            Invocation.getter(#defaultCacheMaxAge),
            returnValue: _FakeDuration_8(
              this,
              Invocation.getter(#defaultCacheMaxAge),
            ),
          )
          as Duration);

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  void connect(_i10.ServerTransport? transport) => super.noSuchMethod(
    Invocation.method(#connect, [transport]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.PendingOperation registerOperation(String? sessionId, String? type) =>
      (super.noSuchMethod(
            Invocation.method(#registerOperation, [sessionId, type]),
            returnValue: _FakePendingOperation_9(
              this,
              Invocation.method(#registerOperation, [sessionId, type]),
            ),
          )
          as _i5.PendingOperation);

  @override
  void notifyProgress(String? operationId, double? progress, String? message) =>
      super.noSuchMethod(
        Invocation.method(#notifyProgress, [operationId, progress, message]),
        returnValueForMissingStub: null,
      );

  @override
  bool isOperationCancelled(String? operationId) =>
      (super.noSuchMethod(
            Invocation.method(#isOperationCancelled, [operationId]),
            returnValue: false,
          )
          as bool);

  @override
  String registerToolCall(
    String? toolName,
    String? sessionId,
    dynamic requestId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#registerToolCall, [
              toolName,
              sessionId,
              requestId,
            ]),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.method(#registerToolCall, [
                toolName,
                sessionId,
                requestId,
              ]),
            ),
          )
          as String);

  @override
  void addTool({
    required String? name,
    required String? description,
    required Map<String, dynamic>? inputSchema,
    required _i4.ToolHandler? handler,
  }) => super.noSuchMethod(
    Invocation.method(#addTool, [], {
      #name: name,
      #description: description,
      #inputSchema: inputSchema,
      #handler: handler,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void addResource({
    required String? uri,
    required String? name,
    required String? description,
    required String? mimeType,
    Map<String, dynamic>? uriTemplate,
    required _i4.ResourceHandler? handler,
  }) => super.noSuchMethod(
    Invocation.method(#addResource, [], {
      #uri: uri,
      #name: name,
      #description: description,
      #mimeType: mimeType,
      #uriTemplate: uriTemplate,
      #handler: handler,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void addPrompt({
    required String? name,
    required String? description,
    required List<_i5.PromptArgument>? arguments,
    required _i4.PromptHandler? handler,
  }) => super.noSuchMethod(
    Invocation.method(#addPrompt, [], {
      #name: name,
      #description: description,
      #arguments: arguments,
      #handler: handler,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void removeTool(String? name) => super.noSuchMethod(
    Invocation.method(#removeTool, [name]),
    returnValueForMissingStub: null,
  );

  @override
  void removeResource(String? uri) => super.noSuchMethod(
    Invocation.method(#removeResource, [uri]),
    returnValueForMissingStub: null,
  );

  @override
  void removePrompt(String? name) => super.noSuchMethod(
    Invocation.method(#removePrompt, [name]),
    returnValueForMissingStub: null,
  );

  @override
  void sendLog(
    _i5.McpLogLevel? level,
    String? message, {
    String? logger,
    Map<String, dynamic>? data,
  }) => super.noSuchMethod(
    Invocation.method(
      #sendLog,
      [level, message],
      {#logger: logger, #data: data},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void sendProgressNotification(
    String? sessionId,
    String? requestId,
    double? progress,
    String? message,
  ) => super.noSuchMethod(
    Invocation.method(#sendProgressNotification, [
      sessionId,
      requestId,
      progress,
      message,
    ]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyResourceUpdated(String? uri, _i5.ResourceContent? content) =>
      super.noSuchMethod(
        Invocation.method(#notifyResourceUpdated, [uri, content]),
        returnValueForMissingStub: null,
      );

  @override
  bool isPathWithinRoots(String? sessionId, String? path) =>
      (super.noSuchMethod(
            Invocation.method(#isPathWithinRoots, [sessionId, path]),
            returnValue: false,
          )
          as bool);

  @override
  _i5.CachedResource? getCachedResource(String? uri) =>
      (super.noSuchMethod(Invocation.method(#getCachedResource, [uri]))
          as _i5.CachedResource?);

  @override
  void cacheResource(
    String? uri,
    _i5.ReadResourceResult? content, [
    Duration? maxAge,
  ]) => super.noSuchMethod(
    Invocation.method(#cacheResource, [uri, content, maxAge]),
    returnValueForMissingStub: null,
  );

  @override
  void invalidateCache(String? uri) => super.noSuchMethod(
    Invocation.method(#invalidateCache, [uri]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.ServerHealth getHealth() =>
      (super.noSuchMethod(
            Invocation.method(#getHealth, []),
            returnValue: _FakeServerHealth_10(
              this,
              Invocation.method(#getHealth, []),
            ),
          )
          as _i5.ServerHealth);

  @override
  void incrementMetric(String? name, [int? amount = 1]) => super.noSuchMethod(
    Invocation.method(#incrementMetric, [name, amount]),
    returnValueForMissingStub: null,
  );

  @override
  Stopwatch startTimer(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#startTimer, [name]),
            returnValue: _FakeStopwatch_11(
              this,
              Invocation.method(#startTimer, [name]),
            ),
          )
          as Stopwatch);

  @override
  void stopTimer(String? name) => super.noSuchMethod(
    Invocation.method(#stopTimer, [name]),
    returnValueForMissingStub: null,
  );

  @override
  void disconnect() => super.noSuchMethod(
    Invocation.method(#disconnect, []),
    returnValueForMissingStub: null,
  );

  @override
  List<_i5.Tool> getTools() =>
      (super.noSuchMethod(
            Invocation.method(#getTools, []),
            returnValue: <_i5.Tool>[],
          )
          as List<_i5.Tool>);

  @override
  List<_i5.Resource> getResources() =>
      (super.noSuchMethod(
            Invocation.method(#getResources, []),
            returnValue: <_i5.Resource>[],
          )
          as List<_i5.Resource>);

  @override
  List<_i5.Prompt> getPrompts() =>
      (super.noSuchMethod(
            Invocation.method(#getPrompts, []),
            returnValue: <_i5.Prompt>[],
          )
          as List<_i5.Prompt>);

  @override
  List<_i5.ClientSession> getSessions() =>
      (super.noSuchMethod(
            Invocation.method(#getSessions, []),
            returnValue: <_i5.ClientSession>[],
          )
          as List<_i5.ClientSession>);
}

/// A class which mocks [LlmClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockLlmClient extends _i1.Mock implements _i6.LlmClient {
  MockLlmClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.LlmInterface get llmProvider =>
      (super.noSuchMethod(
            Invocation.getter(#llmProvider),
            returnValue: _FakeLlmInterface_12(
              this,
              Invocation.getter(#llmProvider),
            ),
          )
          as _i6.LlmInterface);

  @override
  _i6.PluginManager get pluginManager =>
      (super.noSuchMethod(
            Invocation.getter(#pluginManager),
            returnValue: _FakePluginManager_13(
              this,
              Invocation.getter(#pluginManager),
            ),
          )
          as _i6.PluginManager);

  @override
  _i6.ChatSession get chatSession =>
      (super.noSuchMethod(
            Invocation.getter(#chatSession),
            returnValue: _FakeChatSession_14(
              this,
              Invocation.getter(#chatSession),
            ),
          )
          as _i6.ChatSession);

  @override
  set chatSession(_i6.ChatSession? _chatSession) => super.noSuchMethod(
    Invocation.setter(#chatSession, _chatSession),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasMcpClientManager =>
      (super.noSuchMethod(
            Invocation.getter(#hasMcpClientManager),
            returnValue: false,
          )
          as bool);

  @override
  bool get hasRetrievalCapabilities =>
      (super.noSuchMethod(
            Invocation.getter(#hasRetrievalCapabilities),
            returnValue: false,
          )
          as bool);

  @override
  void addMcpClient(String? clientId, dynamic mcpClient) => super.noSuchMethod(
    Invocation.method(#addMcpClient, [clientId, mcpClient]),
    returnValueForMissingStub: null,
  );

  @override
  void removeMcpClient(String? clientId) => super.noSuchMethod(
    Invocation.method(#removeMcpClient, [clientId]),
    returnValueForMissingStub: null,
  );

  @override
  void setDefaultMcpClient(String? clientId) => super.noSuchMethod(
    Invocation.method(#setDefaultMcpClient, [clientId]),
    returnValueForMissingStub: null,
  );

  @override
  List<String> getMcpClientIds() =>
      (super.noSuchMethod(
            Invocation.method(#getMcpClientIds, []),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  void setSystemPrompt(String? systemPrompt) => super.noSuchMethod(
    Invocation.method(#setSystemPrompt, [systemPrompt]),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<String> createEnhancedSystemPrompt({
    String? basePrompt,
    bool? includeSystemPrompt = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createEnhancedSystemPrompt, [], {
              #basePrompt: basePrompt,
              #includeSystemPrompt: includeSystemPrompt,
            }),
            returnValue: _i8.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#createEnhancedSystemPrompt, [], {
                  #basePrompt: basePrompt,
                  #includeSystemPrompt: includeSystemPrompt,
                }),
              ),
            ),
          )
          as _i8.Future<String>);

  @override
  _i8.Future<void> updateSystemPrompt({
    String? basePrompt,
    bool? includeSystemPrompt = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateSystemPrompt, [], {
              #basePrompt: basePrompt,
              #includeSystemPrompt: includeSystemPrompt,
            }),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<_i6.LlmResponse> chat(
    String? userInput, {
    bool? enableTools = true,
    bool? enablePlugins = true,
    Map<String, dynamic>? parameters = const {},
    _i6.LlmContext? context,
    bool? useRetrieval = false,
    bool? enhanceSystemPrompt = true,
    bool? noHistory = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #chat,
              [userInput],
              {
                #enableTools: enableTools,
                #enablePlugins: enablePlugins,
                #parameters: parameters,
                #context: context,
                #useRetrieval: useRetrieval,
                #enhanceSystemPrompt: enhanceSystemPrompt,
                #noHistory: noHistory,
              },
            ),
            returnValue: _i8.Future<_i6.LlmResponse>.value(
              _FakeLlmResponse_15(
                this,
                Invocation.method(
                  #chat,
                  [userInput],
                  {
                    #enableTools: enableTools,
                    #enablePlugins: enablePlugins,
                    #parameters: parameters,
                    #context: context,
                    #useRetrieval: useRetrieval,
                    #enhanceSystemPrompt: enhanceSystemPrompt,
                    #noHistory: noHistory,
                  },
                ),
              ),
            ),
          )
          as _i8.Future<_i6.LlmResponse>);

  @override
  _i8.Stream<_i6.LlmResponseChunk> streamChat(
    String? userInput, {
    bool? enableTools = true,
    bool? enablePlugins = true,
    Map<String, dynamic>? parameters = const {},
    _i6.LlmContext? context,
    bool? useRetrieval = false,
    bool? enhanceSystemPrompt = true,
    bool? noHistory = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #streamChat,
              [userInput],
              {
                #enableTools: enableTools,
                #enablePlugins: enablePlugins,
                #parameters: parameters,
                #context: context,
                #useRetrieval: useRetrieval,
                #enhanceSystemPrompt: enhanceSystemPrompt,
                #noHistory: noHistory,
              },
            ),
            returnValue: _i8.Stream<_i6.LlmResponseChunk>.empty(),
          )
          as _i8.Stream<_i6.LlmResponseChunk>);

  @override
  _i8.Future<dynamic> executeTool(
    String? toolName,
    Map<String, dynamic>? args, {
    bool? enableMcpTools = true,
    bool? enablePlugins = true,
    String? mcpClientId,
    bool? tryAllMcpClients = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #executeTool,
              [toolName, args],
              {
                #enableMcpTools: enableMcpTools,
                #enablePlugins: enablePlugins,
                #mcpClientId: mcpClientId,
                #tryAllMcpClients: tryAllMcpClients,
              },
            ),
            returnValue: _i8.Future<dynamic>.value(),
          )
          as _i8.Future<dynamic>);

  @override
  _i8.Future<dynamic> executeToolWithSpecificClient(
    String? toolName,
    Map<String, dynamic>? args,
    String? clientId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#executeToolWithSpecificClient, [
              toolName,
              args,
              clientId,
            ]),
            returnValue: _i8.Future<dynamic>.value(),
          )
          as _i8.Future<dynamic>);

  @override
  _i8.Future<Map<String, dynamic>> executeToolOnAllMcpClients(
    String? toolName,
    Map<String, dynamic>? args,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#executeToolOnAllMcpClients, [toolName, args]),
            returnValue: _i8.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i8.Future<Map<String, dynamic>>);

  @override
  _i8.Future<List<String>> findMcpClientsWithTool(String? toolName) =>
      (super.noSuchMethod(
            Invocation.method(#findMcpClientsWithTool, [toolName]),
            returnValue: _i8.Future<List<String>>.value(<String>[]),
          )
          as _i8.Future<List<String>>);

  @override
  void setDefaultToolClient(String? clientId) => super.noSuchMethod(
    Invocation.method(#setDefaultToolClient, [clientId]),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<Map<String, List<Map<String, dynamic>>>> getToolsByClient() =>
      (super.noSuchMethod(
            Invocation.method(#getToolsByClient, []),
            returnValue:
                _i8.Future<Map<String, List<Map<String, dynamic>>>>.value(
                  <String, List<Map<String, dynamic>>>{},
                ),
          )
          as _i8.Future<Map<String, List<Map<String, dynamic>>>>);

  @override
  _i8.Future<Map<String, dynamic>> executePrompt(
    String? promptName,
    Map<String, dynamic>? args, {
    String? clientId,
    bool? tryAllClients = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #executePrompt,
              [promptName, args],
              {#clientId: clientId, #tryAllClients: tryAllClients},
            ),
            returnValue: _i8.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i8.Future<Map<String, dynamic>>);

  @override
  _i8.Future<Map<String, dynamic>> readResource(
    String? resourceUri, {
    String? clientId,
    bool? tryAllClients = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #readResource,
              [resourceUri],
              {#clientId: clientId, #tryAllClients: tryAllClients},
            ),
            returnValue: _i8.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i8.Future<Map<String, dynamic>>);

  @override
  _i8.Future<List<_i6.Document>> retrieveRelevantDocuments(
    String? query, {
    int? topK = 5,
    double? minimumScore,
    String? namespace,
    Map<String, dynamic>? filters = const {},
    bool? useCache = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #retrieveRelevantDocuments,
              [query],
              {
                #topK: topK,
                #minimumScore: minimumScore,
                #namespace: namespace,
                #filters: filters,
                #useCache: useCache,
              },
            ),
            returnValue: _i8.Future<List<_i6.Document>>.value(<_i6.Document>[]),
          )
          as _i8.Future<List<_i6.Document>>);

  @override
  _i8.Future<String> addDocument(_i6.Document? document) =>
      (super.noSuchMethod(
            Invocation.method(#addDocument, [document]),
            returnValue: _i8.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#addDocument, [document]),
              ),
            ),
          )
          as _i8.Future<String>);

  @override
  _i8.Future<List<String>> addDocuments(List<_i6.Document>? documents) =>
      (super.noSuchMethod(
            Invocation.method(#addDocuments, [documents]),
            returnValue: _i8.Future<List<String>>.value(<String>[]),
          )
          as _i8.Future<List<String>>);

  @override
  _i8.Future<List<double>> generateEmbeddings(String? text) =>
      (super.noSuchMethod(
            Invocation.method(#generateEmbeddings, [text]),
            returnValue: _i8.Future<List<double>>.value(<double>[]),
          )
          as _i8.Future<List<double>>);

  @override
  _i8.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}

/// A class which mocks [LlmServer].
///
/// See the documentation for Mockito's code generation for more information.
class MockLlmServer extends _i1.Mock implements _i6.LlmServer {
  MockLlmServer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.LlmInterface get llmProvider =>
      (super.noSuchMethod(
            Invocation.getter(#llmProvider),
            returnValue: _FakeLlmInterface_12(
              this,
              Invocation.getter(#llmProvider),
            ),
          )
          as _i6.LlmInterface);

  @override
  set serverManager(_i6.McpServerManager? _serverManager) => super.noSuchMethod(
    Invocation.setter(#serverManager, _serverManager),
    returnValueForMissingStub: null,
  );

  @override
  _i6.PluginManager get pluginManager =>
      (super.noSuchMethod(
            Invocation.getter(#pluginManager),
            returnValue: _FakePluginManager_13(
              this,
              Invocation.getter(#pluginManager),
            ),
          )
          as _i6.PluginManager);

  @override
  Map<String, Function> get localTools =>
      (super.noSuchMethod(
            Invocation.getter(#localTools),
            returnValue: <String, Function>{},
          )
          as Map<String, Function>);

  @override
  _i6.ChatSession get chatSession =>
      (super.noSuchMethod(
            Invocation.getter(#chatSession),
            returnValue: _FakeChatSession_14(
              this,
              Invocation.getter(#chatSession),
            ),
          )
          as _i6.ChatSession);

  @override
  set chatSession(_i6.ChatSession? _chatSession) => super.noSuchMethod(
    Invocation.setter(#chatSession, _chatSession),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasMcpServer =>
      (super.noSuchMethod(Invocation.getter(#hasMcpServer), returnValue: false)
          as bool);

  @override
  bool get hasRetrievalCapabilities =>
      (super.noSuchMethod(
            Invocation.getter(#hasRetrievalCapabilities),
            returnValue: false,
          )
          as bool);

  @override
  void addMcpServer(String? serverId, dynamic mcpServer) => super.noSuchMethod(
    Invocation.method(#addMcpServer, [serverId, mcpServer]),
    returnValueForMissingStub: null,
  );

  @override
  void removeMcpServer(String? serverId) => super.noSuchMethod(
    Invocation.method(#removeMcpServer, [serverId]),
    returnValueForMissingStub: null,
  );

  @override
  void setDefaultMcpServer(String? serverId) => super.noSuchMethod(
    Invocation.method(#setDefaultMcpServer, [serverId]),
    returnValueForMissingStub: null,
  );

  @override
  List<String> getMcpServerIds() =>
      (super.noSuchMethod(
            Invocation.method(#getMcpServerIds, []),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  _i8.Future<bool> registerPluginsWithServer({
    bool? includeToolPlugins = true,
    bool? includePromptPlugins = true,
    bool? includeResourcePlugins = true,
    String? serverId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#registerPluginsWithServer, [], {
              #includeToolPlugins: includeToolPlugins,
              #includePromptPlugins: includePromptPlugins,
              #includeResourcePlugins: includeResourcePlugins,
              #serverId: serverId,
            }),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> registerToolPluginsWithServer({String? serverId}) =>
      (super.noSuchMethod(
            Invocation.method(#registerToolPluginsWithServer, [], {
              #serverId: serverId,
            }),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> registerPromptPluginsWithServer({String? serverId}) =>
      (super.noSuchMethod(
            Invocation.method(#registerPromptPluginsWithServer, [], {
              #serverId: serverId,
            }),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> registerResourcePluginsWithServer({String? serverId}) =>
      (super.noSuchMethod(
            Invocation.method(#registerResourcePluginsWithServer, [], {
              #serverId: serverId,
            }),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<_i6.LlmResponse> askLlm(
    String? prompt, {
    Map<String, dynamic>? parameters = const {},
    _i6.LlmContext? context,
    String? sessionId = 'default',
    String? systemPrompt,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #askLlm,
              [prompt],
              {
                #parameters: parameters,
                #context: context,
                #sessionId: sessionId,
                #systemPrompt: systemPrompt,
              },
            ),
            returnValue: _i8.Future<_i6.LlmResponse>.value(
              _FakeLlmResponse_15(
                this,
                Invocation.method(
                  #askLlm,
                  [prompt],
                  {
                    #parameters: parameters,
                    #context: context,
                    #sessionId: sessionId,
                    #systemPrompt: systemPrompt,
                  },
                ),
              ),
            ),
          )
          as _i8.Future<_i6.LlmResponse>);

  @override
  _i8.Future<bool> registerLocalTool({
    required String? name,
    required String? description,
    required Map<String, dynamic>? inputSchema,
    required _i11.ToolHandler? handler,
    bool? registerWithServer = true,
    String? serverId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#registerLocalTool, [], {
              #name: name,
              #description: description,
              #inputSchema: inputSchema,
              #handler: handler,
              #registerWithServer: registerWithServer,
              #serverId: serverId,
            }),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<dynamic> executeLocalTool(
    String? name,
    Map<String, dynamic>? args,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#executeLocalTool, [name, args]),
            returnValue: _i8.Future<dynamic>.value(),
          )
          as _i8.Future<dynamic>);

  @override
  _i8.Future<bool> generateAndRegisterTool(
    String? description, {
    bool? registerWithServer = true,
    String? sessionId = 'default',
    String? serverId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #generateAndRegisterTool,
              [description],
              {
                #registerWithServer: registerWithServer,
                #sessionId: sessionId,
                #serverId: serverId,
              },
            ),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> generateAndRegisterPrompt(
    String? description, {
    bool? registerWithServer = true,
    String? sessionId = 'default',
    String? serverId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #generateAndRegisterPrompt,
              [description],
              {
                #registerWithServer: registerWithServer,
                #sessionId: sessionId,
                #serverId: serverId,
              },
            ),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> generateAndRegisterResource(
    String? description, {
    bool? registerWithServer = true,
    String? sessionId = 'default',
    String? serverId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #generateAndRegisterResource,
              [description],
              {
                #registerWithServer: registerWithServer,
                #sessionId: sessionId,
                #serverId: serverId,
              },
            ),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> registerCapabilitiesFromFile(
    String? filePath, {
    String? serverId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #registerCapabilitiesFromFile,
              [filePath],
              {#serverId: serverId},
            ),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<Map<String, dynamic>> processQuery({
    required String? query,
    bool? useLocalTools = true,
    bool? usePluginTools = true,
    Map<String, dynamic>? parameters = const {},
    String? sessionId = 'default',
    String? systemPrompt,
    bool? sendToolResultsToLlm = true,
    String? serverId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#processQuery, [], {
              #query: query,
              #useLocalTools: useLocalTools,
              #usePluginTools: usePluginTools,
              #parameters: parameters,
              #sessionId: sessionId,
              #systemPrompt: systemPrompt,
              #sendToolResultsToLlm: sendToolResultsToLlm,
              #serverId: serverId,
            }),
            returnValue: _i8.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i8.Future<Map<String, dynamic>>);

  @override
  _i8.Stream<Map<String, dynamic>> streamProcessQuery({
    required String? query,
    bool? useLocalTools = true,
    bool? usePluginTools = true,
    Map<String, dynamic>? parameters = const {},
    String? sessionId = 'default',
    String? systemPrompt,
    String? serverId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#streamProcessQuery, [], {
              #query: query,
              #useLocalTools: useLocalTools,
              #usePluginTools: usePluginTools,
              #parameters: parameters,
              #sessionId: sessionId,
              #systemPrompt: systemPrompt,
              #serverId: serverId,
            }),
            returnValue: _i8.Stream<Map<String, dynamic>>.empty(),
          )
          as _i8.Stream<Map<String, dynamic>>);

  @override
  _i8.Future<List<Map<String, dynamic>>> getAllServerTools() =>
      (super.noSuchMethod(
            Invocation.method(#getAllServerTools, []),
            returnValue: _i8.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i8.Future<List<Map<String, dynamic>>>);

  @override
  _i8.Future<List<Map<String, dynamic>>> getAllServerPrompts() =>
      (super.noSuchMethod(
            Invocation.method(#getAllServerPrompts, []),
            returnValue: _i8.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i8.Future<List<Map<String, dynamic>>>);

  @override
  _i8.Future<List<Map<String, dynamic>>> getAllServerResources() =>
      (super.noSuchMethod(
            Invocation.method(#getAllServerResources, []),
            returnValue: _i8.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i8.Future<List<Map<String, dynamic>>>);

  @override
  _i8.Future<List<Map<String, dynamic>>> getServerTools(String? serverId) =>
      (super.noSuchMethod(
            Invocation.method(#getServerTools, [serverId]),
            returnValue: _i8.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i8.Future<List<Map<String, dynamic>>>);

  @override
  _i8.Future<List<Map<String, dynamic>>> getServerPrompts(String? serverId) =>
      (super.noSuchMethod(
            Invocation.method(#getServerPrompts, [serverId]),
            returnValue: _i8.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i8.Future<List<Map<String, dynamic>>>);

  @override
  _i8.Future<List<Map<String, dynamic>>> getServerResources(String? serverId) =>
      (super.noSuchMethod(
            Invocation.method(#getServerResources, [serverId]),
            returnValue: _i8.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i8.Future<List<Map<String, dynamic>>>);

  @override
  _i8.Future<Map<String, dynamic>> executeToolOnAllServers(
    String? toolName,
    Map<String, dynamic>? args,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#executeToolOnAllServers, [toolName, args]),
            returnValue: _i8.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i8.Future<Map<String, dynamic>>);

  @override
  _i8.Future<List<String>> findServersWithTool(String? toolName) =>
      (super.noSuchMethod(
            Invocation.method(#findServersWithTool, [toolName]),
            returnValue: _i8.Future<List<String>>.value(<String>[]),
          )
          as _i8.Future<List<String>>);

  @override
  _i8.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}

/// A class which mocks [PluginManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPluginManager extends _i1.Mock implements _i6.PluginManager {
  MockPluginManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> registerPlugin(
    _i6.LlmPlugin? plugin, [
    Map<String, dynamic>? config,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#registerPlugin, [plugin, config]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i6.LlmPlugin? getPlugin(String? name) =>
      (super.noSuchMethod(Invocation.method(#getPlugin, [name]))
          as _i6.LlmPlugin?);

  @override
  _i6.ToolPlugin? getToolPlugin(String? name) =>
      (super.noSuchMethod(Invocation.method(#getToolPlugin, [name]))
          as _i6.ToolPlugin?);

  @override
  _i6.PromptPlugin? getPromptPlugin(String? name) =>
      (super.noSuchMethod(Invocation.method(#getPromptPlugin, [name]))
          as _i6.PromptPlugin?);

  @override
  _i6.ResourcePlugin? getResourcePlugin(String? name) =>
      (super.noSuchMethod(Invocation.method(#getResourcePlugin, [name]))
          as _i6.ResourcePlugin?);

  @override
  _i6.EmbeddingPlugin? getEmbeddingPlugin(String? name) =>
      (super.noSuchMethod(Invocation.method(#getEmbeddingPlugin, [name]))
          as _i6.EmbeddingPlugin?);

  @override
  _i6.PreprocessorPlugin? getPreprocessorPlugin(String? name) =>
      (super.noSuchMethod(Invocation.method(#getPreprocessorPlugin, [name]))
          as _i6.PreprocessorPlugin?);

  @override
  _i6.PostprocessorPlugin? getPostprocessorPlugin(String? name) =>
      (super.noSuchMethod(Invocation.method(#getPostprocessorPlugin, [name]))
          as _i6.PostprocessorPlugin?);

  @override
  _i6.ProviderPlugin? getProviderPlugin(String? name) =>
      (super.noSuchMethod(Invocation.method(#getProviderPlugin, [name]))
          as _i6.ProviderPlugin?);

  @override
  List<_i6.ToolPlugin> getAllToolPlugins() =>
      (super.noSuchMethod(
            Invocation.method(#getAllToolPlugins, []),
            returnValue: <_i6.ToolPlugin>[],
          )
          as List<_i6.ToolPlugin>);

  @override
  List<_i6.PromptPlugin> getAllPromptPlugins() =>
      (super.noSuchMethod(
            Invocation.method(#getAllPromptPlugins, []),
            returnValue: <_i6.PromptPlugin>[],
          )
          as List<_i6.PromptPlugin>);

  @override
  List<_i6.ResourcePlugin> getAllResourcePlugins() =>
      (super.noSuchMethod(
            Invocation.method(#getAllResourcePlugins, []),
            returnValue: <_i6.ResourcePlugin>[],
          )
          as List<_i6.ResourcePlugin>);

  @override
  List<_i6.EmbeddingPlugin> getAllEmbeddingPlugins() =>
      (super.noSuchMethod(
            Invocation.method(#getAllEmbeddingPlugins, []),
            returnValue: <_i6.EmbeddingPlugin>[],
          )
          as List<_i6.EmbeddingPlugin>);

  @override
  List<_i6.PreprocessorPlugin> getAllPreprocessorPlugins() =>
      (super.noSuchMethod(
            Invocation.method(#getAllPreprocessorPlugins, []),
            returnValue: <_i6.PreprocessorPlugin>[],
          )
          as List<_i6.PreprocessorPlugin>);

  @override
  List<_i6.PostprocessorPlugin> getAllPostprocessorPlugins() =>
      (super.noSuchMethod(
            Invocation.method(#getAllPostprocessorPlugins, []),
            returnValue: <_i6.PostprocessorPlugin>[],
          )
          as List<_i6.PostprocessorPlugin>);

  @override
  List<_i6.ProviderPlugin> getAllProviderPlugins() =>
      (super.noSuchMethod(
            Invocation.method(#getAllProviderPlugins, []),
            returnValue: <_i6.ProviderPlugin>[],
          )
          as List<_i6.ProviderPlugin>);

  @override
  List<String> getAllPluginNames() =>
      (super.noSuchMethod(
            Invocation.method(#getAllPluginNames, []),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  bool hasPlugin(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#hasPlugin, [name]),
            returnValue: false,
          )
          as bool);

  @override
  _i8.Future<void> unregisterPlugin(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#unregisterPlugin, [name]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> shutdown() =>
      (super.noSuchMethod(
            Invocation.method(#shutdown, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<String> preprocess(String? input, Map<String, dynamic>? context) =>
      (super.noSuchMethod(
            Invocation.method(#preprocess, [input, context]),
            returnValue: _i8.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#preprocess, [input, context]),
              ),
            ),
          )
          as _i8.Future<String>);

  @override
  _i8.Future<String> postprocess(
    String? output,
    Map<String, dynamic>? context,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#postprocess, [output, context]),
            returnValue: _i8.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#postprocess, [output, context]),
              ),
            ),
          )
          as _i8.Future<String>);

  @override
  List<Map<String, dynamic>> getPluginInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getPluginInfo, []),
            returnValue: <Map<String, dynamic>>[],
          )
          as List<Map<String, dynamic>>);

  @override
  _i8.Future<_i6.LlmCallToolResult?> tryExecuteTool(
    String? toolName,
    Map<String, dynamic>? arguments,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryExecuteTool, [toolName, arguments]),
            returnValue: _i8.Future<_i6.LlmCallToolResult?>.value(),
          )
          as _i8.Future<_i6.LlmCallToolResult?>);

  @override
  _i8.Future<_i6.LlmGetPromptResult?> tryExecutePrompt(
    String? promptName,
    Map<String, dynamic>? arguments,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryExecutePrompt, [promptName, arguments]),
            returnValue: _i8.Future<_i6.LlmGetPromptResult?>.value(),
          )
          as _i8.Future<_i6.LlmGetPromptResult?>);

  @override
  _i8.Future<_i6.LlmReadResourceResult?> tryReadResource(
    String? resourceName,
    Map<String, dynamic>? parameters,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#tryReadResource, [resourceName, parameters]),
            returnValue: _i8.Future<_i6.LlmReadResourceResult?>.value(),
          )
          as _i8.Future<_i6.LlmReadResourceResult?>);
}

/// A class which mocks [LlmInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockLlmInterface extends _i1.Mock implements _i6.LlmInterface {
  MockLlmInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i6.LlmResponse> complete(_i6.LlmRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#complete, [request]),
            returnValue: _i8.Future<_i6.LlmResponse>.value(
              _FakeLlmResponse_15(
                this,
                Invocation.method(#complete, [request]),
              ),
            ),
          )
          as _i8.Future<_i6.LlmResponse>);

  @override
  _i8.Stream<_i6.LlmResponseChunk> streamComplete(_i6.LlmRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#streamComplete, [request]),
            returnValue: _i8.Stream<_i6.LlmResponseChunk>.empty(),
          )
          as _i8.Stream<_i6.LlmResponseChunk>);

  @override
  _i8.Future<List<double>> getEmbeddings(String? text) =>
      (super.noSuchMethod(
            Invocation.method(#getEmbeddings, [text]),
            returnValue: _i8.Future<List<double>>.value(<double>[]),
          )
          as _i8.Future<List<double>>);

  @override
  _i8.Future<void> initialize(_i6.LlmConfiguration? config) =>
      (super.noSuchMethod(
            Invocation.method(#initialize, [config]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  bool hasToolCallMetadata(Map<String, dynamic>? metadata) =>
      (super.noSuchMethod(
            Invocation.method(#hasToolCallMetadata, [metadata]),
            returnValue: false,
          )
          as bool);

  @override
  _i6.LlmToolCall? extractToolCallFromMetadata(
    Map<String, dynamic>? metadata,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#extractToolCallFromMetadata, [metadata]),
          )
          as _i6.LlmToolCall?);

  @override
  Map<String, dynamic> standardizeMetadata(Map<String, dynamic>? metadata) =>
      (super.noSuchMethod(
            Invocation.method(#standardizeMetadata, [metadata]),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}
