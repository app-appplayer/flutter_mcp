// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_mcp/test/mcp_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_mcp/src/config/mcp_config.dart' as _i6;
import 'package:flutter_mcp/src/core/client_manager.dart' as _i8;
import 'package:flutter_mcp/src/core/llm_manager.dart' as _i15;
import 'package:flutter_mcp/src/core/server_manager.dart' as _i11;
import 'package:flutter_mcp/src/managers/client_info.dart' as _i10;
import 'package:flutter_mcp/src/managers/llm_info.dart' as _i16;
import 'package:flutter_mcp/src/managers/server_info.dart' as _i14;
import 'package:flutter_mcp/src/platform/platform_services.dart' as _i3;
import 'package:flutter_mcp/src/platform/tray/tray_manager.dart' as _i7;
import 'package:flutter_mcp/src/plugins/llm_plugin_integration.dart' as _i2;
import 'package:flutter_mcp/src/utils/resource_manager.dart' as _i17;
import 'package:mcp_client/mcp_client.dart' as _i9;
import 'package:mcp_llm/mcp_llm.dart' as _i13;
import 'package:mcp_server/mcp_server.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLlmPluginIntegrator_0 extends _i1.SmartFake
    implements _i2.LlmPluginIntegrator {
  _FakeLlmPluginIntegrator_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PlatformServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformServices extends _i1.Mock implements _i3.PlatformServices {
  MockPlatformServices() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isBackgroundServiceRunning =>
      (super.noSuchMethod(
            Invocation.getter(#isBackgroundServiceRunning),
            returnValue: false,
          )
          as bool);

  @override
  String get platformName =>
      (super.noSuchMethod(
            Invocation.getter(#platformName),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.getter(#platformName),
            ),
          )
          as String);

  @override
  _i5.Future<void> initialize(_i6.MCPConfig? config) =>
      (super.noSuchMethod(
            Invocation.method(#initialize, [config]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> startBackgroundService() =>
      (super.noSuchMethod(
            Invocation.method(#startBackgroundService, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> stopBackgroundService() =>
      (super.noSuchMethod(
            Invocation.method(#stopBackgroundService, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> showNotification({
    required String? title,
    required String? body,
    String? icon,
    String? id = 'mcp_notification',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#showNotification, [], {
              #title: title,
              #body: body,
              #icon: icon,
              #id: id,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> hideNotification(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#hideNotification, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> secureStore(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#secureStore, [key, value]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<String?> secureRead(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#secureRead, [key]),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<bool> secureDelete(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#secureDelete, [key]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> secureContains(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#secureContains, [key]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> setTrayMenu(List<_i7.TrayMenuItem>? items) =>
      (super.noSuchMethod(
            Invocation.method(#setTrayMenu, [items]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setTrayIcon(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#setTrayIcon, [path]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setTrayTooltip(String? tooltip) =>
      (super.noSuchMethod(
            Invocation.method(#setTrayTooltip, [tooltip]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void setLifecycleChangeListener(dynamic Function(dynamic)? listener) =>
      super.noSuchMethod(
        Invocation.method(#setLifecycleChangeListener, [listener]),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> shutdown() =>
      (super.noSuchMethod(
            Invocation.method(#shutdown, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [MCPClientManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockMCPClientManager extends _i1.Mock implements _i8.MCPClientManager {
  MockMCPClientManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  String generateId() =>
      (super.noSuchMethod(
            Invocation.method(#generateId, []),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.method(#generateId, []),
            ),
          )
          as String);

  @override
  void registerClient(
    String? id,
    _i9.Client? client,
    _i9.ClientTransport? transport,
  ) => super.noSuchMethod(
    Invocation.method(#registerClient, [id, client, transport]),
    returnValueForMissingStub: null,
  );

  @override
  _i10.ClientInfo? getClientInfo(String? id) =>
      (super.noSuchMethod(Invocation.method(#getClientInfo, [id]))
          as _i10.ClientInfo?);

  @override
  _i9.Client? getClient(String? id) =>
      (super.noSuchMethod(Invocation.method(#getClient, [id])) as _i9.Client?);

  @override
  List<String> getAllClientIds() =>
      (super.noSuchMethod(
            Invocation.method(#getAllClientIds, []),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  _i5.Future<void> closeClient(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#closeClient, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> closeAll() =>
      (super.noSuchMethod(
            Invocation.method(#closeAll, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  Map<String, dynamic> getStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getStatus, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}

/// A class which mocks [MCPServerManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockMCPServerManager extends _i1.Mock implements _i11.MCPServerManager {
  MockMCPServerManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  String generateId() =>
      (super.noSuchMethod(
            Invocation.method(#generateId, []),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.method(#generateId, []),
            ),
          )
          as String);

  @override
  void registerServer(
    String? id,
    _i12.Server? server,
    _i12.ServerTransport? transport,
  ) => super.noSuchMethod(
    Invocation.method(#registerServer, [id, server, transport]),
    returnValueForMissingStub: null,
  );

  @override
  void setLlmServer(String? id, _i13.LlmServer? llmServer) =>
      super.noSuchMethod(
        Invocation.method(#setLlmServer, [id, llmServer]),
        returnValueForMissingStub: null,
      );

  @override
  _i14.ServerInfo? getServerInfo(String? id) =>
      (super.noSuchMethod(Invocation.method(#getServerInfo, [id]))
          as _i14.ServerInfo?);

  @override
  _i12.Server? getServer(String? id) =>
      (super.noSuchMethod(Invocation.method(#getServer, [id])) as _i12.Server?);

  @override
  List<String> getAllServerIds() =>
      (super.noSuchMethod(
            Invocation.method(#getAllServerIds, []),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  _i5.Future<void> closeServer(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#closeServer, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> closeAll() =>
      (super.noSuchMethod(
            Invocation.method(#closeAll, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  Map<String, dynamic> getStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getStatus, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}

/// A class which mocks [MCPLlmManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockMCPLlmManager extends _i1.Mock implements _i15.MCPLlmManager {
  MockMCPLlmManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  String generateId() =>
      (super.noSuchMethod(
            Invocation.method(#generateId, []),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.method(#generateId, []),
            ),
          )
          as String);

  @override
  String generateLlmClientId(String? llmId) =>
      (super.noSuchMethod(
            Invocation.method(#generateLlmClientId, [llmId]),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.method(#generateLlmClientId, [llmId]),
            ),
          )
          as String);

  @override
  String generateLlmServerId(String? llmId) =>
      (super.noSuchMethod(
            Invocation.method(#generateLlmServerId, [llmId]),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.method(#generateLlmServerId, [llmId]),
            ),
          )
          as String);

  @override
  void registerLlm(
    String? id,
    _i13.McpLlm? mcpLlm, {
    _i13.LlmClient? initialClient,
    _i13.LlmServer? initialServer,
  }) => super.noSuchMethod(
    Invocation.method(
      #registerLlm,
      [id, mcpLlm],
      {#initialClient: initialClient, #initialServer: initialServer},
    ),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<String> addLlmClient(
    String? llmId,
    String? llmClientId,
    _i13.LlmClient? client,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addLlmClient, [llmId, llmClientId, client]),
            returnValue: _i5.Future<String>.value(
              _i4.dummyValue<String>(
                this,
                Invocation.method(#addLlmClient, [llmId, llmClientId, client]),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<String> addLlmServer(
    String? llmId,
    String? llmServerId,
    _i13.LlmServer? server,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addLlmServer, [llmId, llmServerId, server]),
            returnValue: _i5.Future<String>.value(
              _i4.dummyValue<String>(
                this,
                Invocation.method(#addLlmServer, [llmId, llmServerId, server]),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<void> addMcpClientToLlmClient(
    String? llmClientId,
    String? mcpClientId,
    _i9.Client? mcpClient,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addMcpClientToLlmClient, [
              llmClientId,
              mcpClientId,
              mcpClient,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> addMcpServerToLlmServer(
    String? llmServerId,
    String? mcpServerId,
    _i12.Server? mcpServer,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addMcpServerToLlmServer, [
              llmServerId,
              mcpServerId,
              mcpServer,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<String> getDefaultLlmClientId(String? llmId) =>
      (super.noSuchMethod(
            Invocation.method(#getDefaultLlmClientId, [llmId]),
            returnValue: _i5.Future<String>.value(
              _i4.dummyValue<String>(
                this,
                Invocation.method(#getDefaultLlmClientId, [llmId]),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<void> addMcpClientToDefaultLlmClient(
    String? llmId,
    _i9.Client? mcpClient,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addMcpClientToDefaultLlmClient, [
              llmId,
              mcpClient,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> removeMcpClientFromLlmClient(
    String? llmClientId,
    String? mcpClientId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#removeMcpClientFromLlmClient, [
              llmClientId,
              mcpClientId,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> removeMcpServerFromLlmServer(
    String? llmServerId,
    String? mcpServerId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#removeMcpServerFromLlmServer, [
              llmServerId,
              mcpServerId,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setDefaultMcpClientForLlmClient(
    String? llmClientId,
    String? mcpClientId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#setDefaultMcpClientForLlmClient, [
              llmClientId,
              mcpClientId,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setDefaultMcpServerForLlmServer(
    String? llmServerId,
    String? mcpServerId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#setDefaultMcpServerForLlmServer, [
              llmServerId,
              mcpServerId,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void setDefaultLlmClient(String? llmId, String? llmClientId) =>
      super.noSuchMethod(
        Invocation.method(#setDefaultLlmClient, [llmId, llmClientId]),
        returnValueForMissingStub: null,
      );

  @override
  void setDefaultLlmServer(String? llmId, String? llmServerId) =>
      super.noSuchMethod(
        Invocation.method(#setDefaultLlmServer, [llmId, llmServerId]),
        returnValueForMissingStub: null,
      );

  @override
  _i16.LlmInfo? getLlmInfo(String? id) =>
      (super.noSuchMethod(Invocation.method(#getLlmInfo, [id]))
          as _i16.LlmInfo?);

  @override
  _i13.LlmClient? getLlmClientById(String? llmClientId) =>
      (super.noSuchMethod(Invocation.method(#getLlmClientById, [llmClientId]))
          as _i13.LlmClient?);

  @override
  _i13.LlmServer? getLlmServerById(String? llmServerId) =>
      (super.noSuchMethod(Invocation.method(#getLlmServerById, [llmServerId]))
          as _i13.LlmServer?);

  @override
  List<String> getAllLlmIds() =>
      (super.noSuchMethod(
            Invocation.method(#getAllLlmIds, []),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  List<String> getAllLlmClientIds() =>
      (super.noSuchMethod(
            Invocation.method(#getAllLlmClientIds, []),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  List<String> getAllLlmServerIds() =>
      (super.noSuchMethod(
            Invocation.method(#getAllLlmServerIds, []),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  Set<String> getMcpClientIdsForLlmClient(String? llmClientId) =>
      (super.noSuchMethod(
            Invocation.method(#getMcpClientIdsForLlmClient, [llmClientId]),
            returnValue: <String>{},
          )
          as Set<String>);

  @override
  Set<String> getMcpServerIdsForLlmServer(String? llmServerId) =>
      (super.noSuchMethod(
            Invocation.method(#getMcpServerIdsForLlmServer, [llmServerId]),
            returnValue: <String>{},
          )
          as Set<String>);

  @override
  List<String> findLlmClientIdsWithMcpClient(String? mcpClientId) =>
      (super.noSuchMethod(
            Invocation.method(#findLlmClientIdsWithMcpClient, [mcpClientId]),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  List<String> findLlmServerIdsWithMcpServer(String? mcpServerId) =>
      (super.noSuchMethod(
            Invocation.method(#findLlmServerIdsWithMcpServer, [mcpServerId]),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  List<String> findLlmsForMcpClient(String? mcpClientId) =>
      (super.noSuchMethod(
            Invocation.method(#findLlmsForMcpClient, [mcpClientId]),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  List<String> findLlmsForMcpServer(String? mcpServerId) =>
      (super.noSuchMethod(
            Invocation.method(#findLlmsForMcpServer, [mcpServerId]),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  String? getLlmIdForClient(String? llmClientId) =>
      (super.noSuchMethod(Invocation.method(#getLlmIdForClient, [llmClientId]))
          as String?);

  @override
  String? getLlmIdForServer(String? llmServerId) =>
      (super.noSuchMethod(Invocation.method(#getLlmIdForServer, [llmServerId]))
          as String?);

  @override
  _i5.Future<void> closeLlm(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#closeLlm, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> closeLlmClient(String? llmClientId) =>
      (super.noSuchMethod(
            Invocation.method(#closeLlmClient, [llmClientId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> closeLlmServer(String? llmServerId) =>
      (super.noSuchMethod(
            Invocation.method(#closeLlmServer, [llmServerId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> closeAll() =>
      (super.noSuchMethod(
            Invocation.method(#closeAll, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  Map<String, dynamic> getStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getStatus, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i5.Future<Map<String, bool>> registerCoreLlmPlugins(
    String? llmId, {
    String? llmClientId,
    String? llmServerId,
    bool? includeCompletionPlugin = true,
    bool? includeStreamingPlugin = true,
    bool? includeEmbeddingPlugin = true,
    bool? includeRetrievalPlugins = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #registerCoreLlmPlugins,
              [llmId],
              {
                #llmClientId: llmClientId,
                #llmServerId: llmServerId,
                #includeCompletionPlugin: includeCompletionPlugin,
                #includeStreamingPlugin: includeStreamingPlugin,
                #includeEmbeddingPlugin: includeEmbeddingPlugin,
                #includeRetrievalPlugins: includeRetrievalPlugins,
              },
            ),
            returnValue: _i5.Future<Map<String, bool>>.value(<String, bool>{}),
          )
          as _i5.Future<Map<String, bool>>);

  @override
  _i2.LlmPluginIntegrator getPluginIntegrator() =>
      (super.noSuchMethod(
            Invocation.method(#getPluginIntegrator, []),
            returnValue: _FakeLlmPluginIntegrator_0(
              this,
              Invocation.method(#getPluginIntegrator, []),
            ),
          )
          as _i2.LlmPluginIntegrator);
}

/// A class which mocks [ResourceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockResourceManager extends _i1.Mock implements _i17.ResourceManager {
  MockResourceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<String> get allKeys =>
      (super.noSuchMethod(Invocation.getter(#allKeys), returnValue: <String>[])
          as List<String>);

  @override
  int get count =>
      (super.noSuchMethod(Invocation.getter(#count), returnValue: 0) as int);

  @override
  void register<T>(
    String? key,
    T? resource,
    _i5.Future<void> Function(T)? disposeFunction, {
    int? priority = 100,
    List<String>? dependencies,
    String? tag,
  }) => super.noSuchMethod(
    Invocation.method(
      #register,
      [key, resource, disposeFunction],
      {#priority: priority, #dependencies: dependencies, #tag: tag},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void registerSubscription(
    String? key,
    _i5.StreamSubscription<dynamic>? subscription, {
    int? priority = 100,
    List<String>? dependencies,
    String? tag,
  }) => super.noSuchMethod(
    Invocation.method(
      #registerSubscription,
      [key, subscription],
      {#priority: priority, #dependencies: dependencies, #tag: tag},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void registerCallback(
    String? key,
    _i5.Future<void> Function()? callback, {
    int? priority = 100,
    List<String>? dependencies,
    String? tag,
  }) => super.noSuchMethod(
    Invocation.method(
      #registerCallback,
      [key, callback],
      {#priority: priority, #dependencies: dependencies, #tag: tag},
    ),
    returnValueForMissingStub: null,
  );

  @override
  T? get<T>(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key])) as T?);

  @override
  bool hasResource(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#hasResource, [key]),
            returnValue: false,
          )
          as bool);

  @override
  void addDependency(String? resource, String? dependsOn) => super.noSuchMethod(
    Invocation.method(#addDependency, [resource, dependsOn]),
    returnValueForMissingStub: null,
  );

  @override
  void removeDependency(String? resource, String? dependsOn) =>
      super.noSuchMethod(
        Invocation.method(#removeDependency, [resource, dependsOn]),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> dispose(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#dispose, [key]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> disposeAll() =>
      (super.noSuchMethod(
            Invocation.method(#disposeAll, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void registerWithTag<T>(
    String? key,
    T? resource,
    _i5.Future<void> Function(T)? disposeFunction,
    String? tag, {
    int? priority = 100,
    List<String>? dependencies,
  }) => super.noSuchMethod(
    Invocation.method(
      #registerWithTag,
      [key, resource, disposeFunction, tag],
      {#priority: priority, #dependencies: dependencies},
    ),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> disposeByTag(String? tag) =>
      (super.noSuchMethod(
            Invocation.method(#disposeByTag, [tag]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  List<String> getKeysByTag(String? tag) =>
      (super.noSuchMethod(
            Invocation.method(#getKeysByTag, [tag]),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  Map<String, dynamic> getStatistics() =>
      (super.noSuchMethod(
            Invocation.method(#getStatistics, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  void clear() => super.noSuchMethod(
    Invocation.method(#clear, []),
    returnValueForMissingStub: null,
  );
}
